#!/bin/zsh
# This script defines a function for generating a prompt
# of the format pyenv(venv) that can be included in a custom prompt

if [[ -z "$pyenv_prompt_file_sourced" ]]; then
    # You can access the prompt generated by this script with the PYENV_PROMPT env variable
    pyenv_prompt() {
        # Current virtualenv
        local ref=$PYENV_VIRTUAL_ENV
        if [[ -n "$ref" ]]; then
            PYENV_PROMPT='pyenv(%F{cyan}'${ref##*/}'%f)'
        else
            PYENV_PROMPT=''
        fi
    }

    pyenv_prompt_set_newline() { 
        pyenv_prompt_newlines_before=$1
        pyenv_prompt_newlines_after=$2
    }

    pyenv_prompt_newline() {
        pyenv_prompt

        local countBefore=$pyenv_prompt_newlines_before
        local countAfter=$pyenv_prompt_newlines_after
        newLinesBefore=''
        newLinesAfter=''

        if [[ "$OSTYPE" == "darwin"* ]]; then
            if (($countBefore > 0)); then
                for i in $(seq 1 $countBefore); do
                    newLinesBefore=$newLinesBefore$'%{\n%}'
                done           
            fi        
            if (($countAfter > 0)); then
                for j in $(seq 1 $countAfter); do
                    newLinesAfter=$newLinesAfter$'%{\n%}'
                done
            fi
        else
            for i in $(seq 1 $countBefore); do
                newLinesBefore=$newLinesBefore$'%{\n\r%}'
            done
            for j in $(seq 1 $countAfter); do
                newLinesAfter=$newLinesAfter$'%{\n\r%}'
            done
        fi

        if [ -n "$PYENV_PROMPT" ]; then
            PYENV_PROMPT=$newLinesBefore$PYENV_PROMPT$newLinesAfter
        fi
    }

    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

pyenv_prompt_file_sourced=true;